{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","requestOnAPI","url","a","obj","fetch","response","ok","Error","json","getPosts","getUserPosts","userId","getPostDetails","postId","PostsList","props","selectedUserId","selectedPostId","selectPostId","useState","posts","setPosts","useEffect","postsFromAPI","userPostsFromAPI","className","length","map","post","title","type","onClick","id","NewCommentForm","addNewComment","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","getPostComments","addComment","newComment","method","headers","JSON","stringify","deleteComment","commentId","PostDetails","setPost","comments","setComments","isCommentVisible","setIsCommentVisible","postDetailsFromAPI","postCommentsFromAPI","deleteCommentFromAPI","filter","comment","getUsers","App","users","setUsers","setSelectedUserId","setSelectedPostId","usersFromAPI","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0605b8c2.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const requestOnAPI = async (url:string, obj = {}) => {\n  const response = await fetch(`${BASE_URL}/${url}`, obj);\n\n  if (!response.ok) {\n    throw new Error('Error of loading');\n  }\n\n  return response.json();\n};\n","import { requestOnAPI } from './api';\n\nexport const getPosts = async () => {\n  return requestOnAPI('/posts');\n};\n\nexport const getUserPosts = async (userId: number) => {\n  return requestOnAPI(`/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = async (postId: number) => {\n  return requestOnAPI(`/posts/${postId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPosts, getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ntype Props = {\n  selectedUserId: number;\n  selectedPostId: number;\n  selectPostId: (postId: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { selectedUserId, selectedPostId, selectPostId } = props;\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      if (!selectedUserId) {\n        const postsFromAPI = await getPosts();\n\n        setPosts(postsFromAPI);\n\n        return;\n      }\n\n      const userPostsFromAPI = await getUserPosts(selectedUserId);\n\n      setPosts(userPostsFromAPI);\n    })();\n  }, [selectedUserId]);\n\n  const handleClick = (postId: number) => {\n    if (selectedPostId === postId) {\n      selectPostId(0);\n    } else {\n      selectPostId(postId);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {!posts.length\n        ? <h3>No posts yet</h3>\n        : (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                className=\"PostsList__item\"\n                key={post.id}\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleClick(post.id)}\n                >\n                  {selectedPostId === post.id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n};\n","import React, { FormEvent, useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number;\n  addNewComment: (newComment: Partial<Comment>) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { selectedPostId, addNewComment } = props;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addNewComment({\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    });\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { requestOnAPI } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  return requestOnAPI(`/comments?postId=${postId}`);\n};\n\nexport const addComment = async (newComment: Comment) => {\n  return requestOnAPI('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n\nexport const deleteComment = async (commentId: number) => {\n  return requestOnAPI(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentVisible, setIsCommentVisible] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      const postDetailsFromAPI = await getPostDetails(selectedPostId);\n\n      setPost(postDetailsFromAPI);\n    })();\n\n    (async () => {\n      const postCommentsFromAPI = await getPostComments(selectedPostId);\n\n      setComments(postCommentsFromAPI);\n    })();\n  }, [selectedPostId]);\n\n  const addNewComment = async (newComment: Partial<Comment>) => {\n    await addComment(newComment as Comment);\n\n    const postCommentsFromAPI = await getPostComments(selectedPostId);\n\n    setComments(postCommentsFromAPI);\n  };\n\n  const deleteCommentFromAPI = async (commentId: number) => {\n    await deleteComment(commentId);\n\n    setComments(comments.filter(comment => comment.id !== commentId));\n  };\n\n  const handleClick = () => {\n    setIsCommentVisible(!isCommentVisible);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleClick}\n        >\n          {isCommentVisible\n            ? `Hide ${comments.length} comments`\n            : `Show ${comments.length} comments`}\n        </button>\n\n        <ul className=\"PostDetails__list\">\n          {isCommentVisible && (\n            <>\n              {comments.map(comment => (\n                <li className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => deleteCommentFromAPI(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </>\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { requestOnAPI } from './api';\n\nexport const getUsers = async () => {\n  return requestOnAPI('/users');\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    (async () => {\n      const usersFromAPI = await getUsers();\n\n      setUsers(usersFromAPI);\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const usersFromAPI = await getUsers();\n\n      setUsers(usersFromAPI);\n    })();\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            selectPostId={setSelectedPostId}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}